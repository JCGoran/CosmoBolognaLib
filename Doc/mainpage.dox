/**
@mainpage The CosmoBolognaLib documentation

Here you can find the full documentation of the @b CosmoBolognaLib, a
large set of Open Source C++ libraries for cosmological
calculations. Among many other things, these libraries can be used to
measure the two-point and three-point correlation functions, and to
model redshift-space distortions and baryon acoustic oscillations.

Please have a look at the example codes in CosmoBolognaLib/Examples/
that show how to use the CosmoBolognaLib in either @b C++ or @b Python
codes.

If you use the CosmoBolognaLib, please reference the code paper: @b
CosmoBolognaLib: @b C++ @b libraries @b for @b cosmological @b
calculations http://arxiv.org/abs/1511.00012

The specific tools to analyse cosmic void catalogues are presented in
https://arxiv.org/abs/1703.07848

This is the full list of scientific publications that used the
CosmoBolognaLib: <a href="../../Doc/papers.txt">publications</a>

-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------

Author and BDFL:
  - @b Federico @b Marulli (federico.marulli3@unibo.it)

Main contributors:
  - Michele Moresco (three-point correlation)
  - Alfonso Veropalumbo (two-point angular correlation, clustering
    wedges, jackknife and bootstrap, lognormal mocks, BAO modelling,
    MCMC, three-point correlation modelling, etc.)

Other contributors:
  - Carlo Cannarozzo (void detection)
  - Cosimo Fedeli (non-Gaussian cosmologies)
  - Carlo Giocoli (mass accretion history)
  - Jacopo Neri (mass function)
  - Mauro Roncarelli (fast comoving distance estimator) 
  - Tommaso Ronconi (void number counts)


-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------

A @b configured @b virtual @b development @b environment to use the
CosmoBolognaLib is avaliable here:
https://apps.difa.unibo.it/files/people/Str957-cluster/CosmoBolognaLib_VM/

Alternatively, to @b install @b the @b CosmoBolognaLib on a custom
Unix/Mac distribution, please follow the instructions below:

first, make sure that the following external libraries are present in your system:
- GSL (GNU Scientific Library) (v2.1 is required)
- FFTW (Fastest Fourier Transform in the West)
- OpenMP (Open Multiprocessing)
- CFITSIO

if the paths of these libraries are not the default ones, then they
have to be added to the LD_LIBRARY_PATH environment variable (e.g.
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/your_path)

the FFTW have to be compiled as shared libraries and using OpenMP
compiler directives (e.g. on Unix systems: ./configure --enable-shared
--enable-openmp)

then:

------------------------------
--- for @b Python @b users ---


> <KBD> $ pip install CosmoBolognaLib --user </KBD> 
 
or with sudo privileges:
  
> <KBD> $ sudo pip install CosmoBolognaLib </KBD>

------------------------------
--- for @b C++ @b users and @b C++/Python @b developers ---

  - download the CosmobolognaLib:

either, clone the public GitHub repository of the CosmobolognaLib
with:

> <KBD> $ git clone git\@github.com:/federicomarulli/CosmoBolognaLib </KBD> 

or, alternatively, download and untar the file:
http://apps.difa.unibo.it/files/people/federico.marulli3/CosmoBolognaLib.tar

  - enter the folder CosmoBolognaLib/ and type:
    
> <KBD> $ make </KBD> 
    
by default, make will compile the full set of libraries using the GNU
project g++ compile (>=v4.8.4 is required); both the compiler and the
compilation flags can be specified by modifying the variables C and
FLAGS defined in the Makefile (e.g.: make C=icpc FLAGS="-O0 -g")

  - optionally, the following external softwares used by the CosmoBolognaLib can be compiled with the following commands:

> <KBD> $ make fftlog-f90 </KBD> 

> <KBD> $ make CAMB </KBD> 

> <KBD> $ make CLASS </KBD> 

> <KBD> $ make CLASSpy </KBD>  [ ---> compile the Python wrapper for CLASS) ]

> <KBD> $ make MPTbreeze </KBD> 

> <KBD> $ make mangle </KBD> 

  - other Makefile options are:

> <KBD> $ make lib* </KBD> [ ---> compile the * library (e.g. make libFUNC will compile the library libFUNC.so) ]

> <KBD> $ make python </KBD> [ ---> compile the Python wrappers (SWIG
  >v3.0 is required); in this case, CosmoBolognaLib/Python/ has to be added in PYTHONPATH (e.g. in .bashrc add the following line: export PYTHONPATH=$PYTHONPATH:/path_to/CosmoBolognaLib/Python/) ]

> <KBD> $ make cleanpy </KBD> [ ---> remove the Python wrappers ]
    
> <KBD> $ make allExamples </KBD> [ ---> compile all the C++ example codes ]

> <KBD> $ make cleanExamples </KBD>  [ ---> remove all the object files of the examples ]

> <KBD> $ make doc </KBD> [ ---> create the documentation (Doxygen is required) ]

> <KBD> $ make clean </KBD> [ ---> cleanExamples + remove all the object files of the libraries ]

> <KBD> $ make purge </KBD> [ ---> make clean + remove all the library files (i.e. *.so) ]

> <KBD> $ make purgeALL </KBD>  [---> make purge + make cleanpy + remove all the files stored for internal calculations ]
   
*/
	